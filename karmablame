#!/usr/bin/perl

use 5.12.2;
use warnings;

use Cwd;
use Data::Dumper;

sub main {
    my @argv = @_;

    my $blames = blame_git_tree($argv[0]);

    foreach my $file ( keys %{ $blames } ) {
        my $html = generate_html( $file, $blames->{$file} );
        write_html( cwd() . '/html', $file, $html );
    }
}

sub blame_git_tree {
    my $git_dir = shift;

    my $cwd = cwd();
    chdir $git_dir;

    my @git_files = split /\n/, `git ls-files`;
    my ($count, $total) = (0, scalar @git_files);

    my %blames = ();

    foreach my $file (@git_files) {
        next if -B $file && $total--;
        $blames{$file} = blame_file($file);

        $count++;
        print "Processed $count/$total\r";
    }
    print "\n";

    chdir $cwd;

    return \%blames;
}

sub blame_file {
    my $file = shift;

    my %meta = ();
    my @blocks = ();
    my @blames = `git blame -w --porcelain $file`;

    while (my ($block, $cursor) = read_blame_block(@blames)) {

        if (%{ $block->{meta} }) {
            $meta{$block->{sha}} = $block->{meta};
        } else {
            $block->{meta} = $meta{$block->{sha}};
        }

        push @blocks, $block;
        splice @blames, 0, $cursor;
    }

    return \@blocks;
}

sub read_blame_block {
    my (@lines) = @_;

    my $block = {
        meta => {},
        lines => [],
    };
    my $cursor = 0;
    my $next_line_number = -1;
    foreach my $line (@lines) {
        chomp $line;

        if ($line =~ /^([a-f0-9]+)\s(\d+)\s(\d+)(?:\s(\d+))?$/) {
            last if $4 && $block->{length};
            $block->{sha} = $1;
            $next_line_number = $2;
            $block->{length} = $4 if $4;
        } elsif ($line =~ /^([a-z-]+)(?:\s(.*))?$/) {
            $block->{meta}{$1} = $2;
        } elsif ($line =~ /^\t(.*)/) {
            push @{ $block->{lines} }, {
                num => $next_line_number-0,
                code => $1,
            }
        } else {
            die "Cannot parse line $line"
        }

        $cursor += 1;
    }

    return $cursor ? ($block, $cursor) : ();
}

sub write_html {
    my ($root, $file, $html) = @_;
    my $file_dir = '';

    if ($file =~ /^(.*?)\/[^\/]+$/) {
        $file_dir = $1;
    }
    `mkdir -p $root/$file_dir`;

    open(my $fh, '>', "$root/$file.html");
    print $fh $html;
    close($fh);
}

sub generate_html {
    my ($file, $data) = @_;

    my @html = (
        '<!doctype html>',
        '<meta charset="utf-8">',
        '<title>' . $file . '</title>',
        '<link rel="stylesheet" href="../static/github.css">',
        '<div class="blob-wrapper">',
        '<table class="blame-container tab-size" data-tab-size="4">'
    );

    foreach my $block ( @{ $data } ) {
        push @html, '<tbody class="blame-hunk">';
        push @html, '<tr class="blame-commit">',
                        '<td class="blame-commit-info" rowspan="' . (1+$block->{length}) . '">',
							'<a href="#8663bc110305844b2f8b0829ee2ddfc5be61b758" class="blame-sha">',
							'</a>',
                            '<span class="blame-commit-title">',
                                '<a href="#8663bc110305844b2f8b0829ee2ddfc5be61b758" class="message" title="">',
                                    $block->{meta}{summary},
                                '</a>',
                            '</span>',
                            '<div class="blame-commit-meta">',
                                '<a href="#" class="muted-link" rel="contributor">',
                                    $block->{meta}{author},
                                '</a> authored',
                                '<relative-time datetime="2012-04-06T21:24:33Z" title="6 Apr 2012, 23:24 CEST">on 6 Apr 2012</relative-time>',
                            '</div>',
                        '</td>',
                    '</tr>';
        foreach my $line ( @{ $block->{lines} } ) {
            push @html, '<tr class="blame-line">',
                            '<td class="line-age"></td>',
                            '<td class="blob-num blame-blob-num" id="#' . $line->{num} . '">',
                                $line->{num},
                            '</td>',
                            '<td class="blob-code blob-code-inner">',
                                $line->{code},
                            '</td>',
                        '</tr>';
        }
        push @html, '</tbody>';
    }

    push @html, '</table></div>';

    return join '', @html;
}

main(@ARGV);

1;

#!/usr/bin/perl

use 5.12.2;
use warnings;

use Cwd;
use JSON::PP;
use Data::Dumper;
use POSIX qw(strftime);

sub main {
    my @argv = @_;

    my $config = read_config($argv[1]);
    my $blames = blame_git_tree($argv[0]);

    print_stats( calculate_stats($blames, $config) );

    foreach my $file ( keys %{ $blames } ) {
        my $html = generate_html( $file, $blames->{$file}, $config );
        write_html( cwd() . '/html', $file, $html );
    }
}

sub read_config() {
    my $path = shift || cwd() . '/.karmaline';
    my $json;

    eval {
        local $/ = undef;
        open my $fh, '<', $path or die "Can't open $path";
        $json = JSON::PP::decode_json(<$fh>);
        close $fh;
    };

    if (!$json) {
        die "Can't read config $path\n$@";
    } else {
        return $json;
    }
}

sub blame_git_tree {
    my $git_dir = shift;

    my $cwd = cwd();
    chdir $git_dir;

    my @git_files = split /\n/, `git ls-files`;
    my ($count, $total) = (0, scalar @git_files);

    my %blames = ();

    foreach my $file (@git_files) {
        next if -B $file && $total--;
        $blames{$file} = blame_file($file);

        $count++;
        print "Processed $count/$total\r";
    }
    print "\n";

    chdir $cwd;

    return \%blames;
}

sub blame_file {
    my $file = shift;

    my %meta = ();
    my @blocks = ();
    my @blames = `git blame -w --porcelain $file`;

    while (my ($block, $cursor) = read_blame_block(@blames)) {

        if (%{ $block->{meta} }) {
            $meta{$block->{sha}} = $block->{meta};
        } else {
            $block->{meta} = $meta{$block->{sha}};
        }

        push @blocks, $block;
        splice @blames, 0, $cursor;
    }

    return \@blocks;
}

sub read_blame_block {
    my (@lines) = @_;

    my $block = {
        meta => {},
        lines => [],
    };
    my $cursor = 0;
    my $next_line_number = -1;
    foreach my $line (@lines) {
        chomp $line;

        if ($line =~ /^([a-f0-9]+)\s(\d+)\s(\d+)(?:\s(\d+))?$/) {
            last if $4 && $block->{length};
            $block->{sha} = $1;
            $next_line_number = $2;
            $block->{length} = $4 if $4;
        } elsif ($line =~ /^([a-z-]+)(?:\s<?(.*?)>?)?$/) {
            $block->{meta}{$1} = $2;
        } elsif ($line =~ /^\t(.*)/) {
            push @{ $block->{lines} }, {
                num => $next_line_number-0,
                code => $1,
            }
        } else {
            die "Cannot parse line $line"
        }

        $cursor += 1;
    }

    return $cursor ? ($block, $cursor) : ();
}

sub calculate_stats {
    my ($blames, $config) = @_;

    my $stats = {
        file => 0,
        block => {},
        karma => {},
    };

    my $grand_total = 0;

    foreach my $file ( keys %{ $blames } ) {
        my $total = 0;
        my $acc_karma = 0;
        my $with_karma = 0;

        foreach my $block ( @{ $blames->{$file} } ) {
            my $karma = get_karma($block, $config);
            my $lines = $block->{length};

            $total += $lines;

            if ($karma) {
                $acc_karma += $lines;
                $with_karma += $lines;
                $stats->{block}{ $lines }++;
            } elsif ($acc_karma) {
                $stats->{karma}{ $acc_karma }++;
                $acc_karma = 0;
            }
        }

        $stats->{karma}{ $acc_karma }++ if $acc_karma;
        $stats->{file}++ if $total == $with_karma;

        $grand_total += $total;
    }

    $stats->{total_lines} = $grand_total;
    $stats->{total_files} = scalar keys %{ $blames };

    my $karma_num;
    my $block_num;

    map { $karma_num += $_ * $stats->{karma}{$_} } keys %{ $stats->{karma} };
    map { $block_num += $_ * $stats->{block}{$_} } keys %{ $stats->{block} };

    die "Incorrect stats calculations $block_num != $karma_num" if $block_num != $karma_num;

    $stats->{karma_lines} = $karma_num;

    return $stats;
}

sub print_stats {
    my ($stats) = @_;


    sub _distribution {
        my ($title, $data) = @_;
        my @marks = (140, 70, 50, 30, 15, 7);

        print $title;

        foreach my $lines ( @marks ) {
            my $karma_num = 0;
            my $karma_set = 0;
            foreach my $karma_lines ( keys %{ $data } ) {
                next if $karma_lines < $lines;
                $karma_set += $data->{ $karma_lines };
                $karma_num += $karma_lines * $data->{ $karma_lines };
            }
            printf "\t%3u: %4u groups ( %6u lines)\n",
                $lines,
                $karma_set,
                $karma_num;
        }
    }

    printf "%u/%u files has 100%% good karma\n",
        $stats->{file},
        $stats->{total_files};

    printf "%u%% of lines has good karma %u/%u\n",
        $stats->{karma_lines}/$stats->{total_lines}*100,
        $stats->{karma_lines},
        $stats->{total_lines};

    _distribution("Continuous groups larger that N lines:\n", $stats->{karma});
    _distribution("Continuous groups larger that N lines from the same commit:\n", $stats->{block});

}

sub get_karma {
    my ($block, $config) = @_;

    my $author = $block->{meta}{'author-mail'};
    my $summary = $block->{meta}{summary};

    if ($summary =~ /\b#karma_(\d+)\b/) {
        return $1;
    } else {
        return $config->{karma}{ $author } || 0;
    }
}

sub write_html {
    my ($root, $file, $html) = @_;
    my $file_dir = '';

    if ($file =~ /^(.*?)\/[^\/]+$/) {
        $file_dir = $1;
    }
    `mkdir -p $root/$file_dir`;

    open(my $fh, '>', "$root/$file.html");
    print $fh $html;
    close($fh);
}

sub generate_html {
    my ($file, $data, $config) = @_;

    my @html = (
        '<!doctype html>',
        '<meta charset="utf-8">',
        '<title>' . $file . '</title>',
        '<link rel="stylesheet" href="../static/github.css">',
        '<div class="blob-wrapper">',
        '<table class="blame-container tab-size" data-tab-size="4">'
    );

    foreach my $block ( @{ $data } ) {
        push @html, '<tbody class="blame-hunk">';
        push @html, '<tr class="blame-commit">',
                        '<td class="blame-commit-info" rowspan="' . (1+$block->{length}) . '">',
							'<a href="' . sprintf($config->{url}{commit}, $block->{sha}) . '" class="blame-sha">',
							    substr($block->{sha}, 0, 10),
							'</a>',
                            '<span class="blame-commit-title">',
                                '<a href="' . sprintf($config->{url}{commit}, $block->{sha}) . '" class="message" title="">',
                                    $block->{meta}{summary},
                                '</a>',
                            '</span>',
                            '<div class="blame-commit-meta">',
                                '<a href="' . sprintf($config->{url}{author}, $block->{meta}{'author-mail'}) . '" class="muted-link" rel="contributor">',
                                    $block->{meta}{author},
                                '</a> authored ',
                                '<span title="' . strftime("%d %b %Y, %H:%M:%S", localtime($block->{meta}{'author-time'}))  . '">',
                                    strftime("%d %b %Y", localtime($block->{meta}{'author-time'})),
                                '</span>',
                            '</div>',
                        '</td>',
                    '</tr>';
        foreach my $line ( @{ $block->{lines} } ) {
            push @html, '<tr class="blame-line">',
                            '<td class="line-age karma" data-karma="' . get_karma($block, $config) . '"></td>',
                            '<td class="blob-num blame-blob-num" id="L' . $line->{num} . '">',
                                '<a class="blob-num" href="#L' . $line->{num} . '">',
                                    $line->{num},
                                '</a>',
                            '</td>',
                            '<td class="blob-code blob-code-inner">',
                                $line->{code},
                            '</td>',
                        '</tr>';
        }
        push @html, '</tbody>';
    }

    push @html, '</table></div>';

    return join '', @html;
}

main(@ARGV);

1;
